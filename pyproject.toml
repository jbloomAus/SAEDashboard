[tool.poetry]
name = "sae-dashboard"
version = "0.6.11"
description = "Open-source SAE visualizer, based on Anthropic's published visualizer. Forked / Detached from sae_vis."
authors = ["Callum McDougall <cal.s.mcdougall@gmail.com>", "Joseph Bloom, <jbloomaus@gmail.com>"]
readme = "README.md"
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
torch = "^2.0.0"
einops = ">=0.7.0"
datasets = "^2.0.0"
dataclasses-json = "^0.6.4"
jaxtyping = "^0.2.28"
transformer-lens = "^2.2.0,<3.0.0"
eindex-callum = "^0.1.0"
rich = "^13.7.1"
matplotlib = "^3.8.4"
safetensors = "^0.4.3"
typer = "^0.12.3"
sae-lens = "^5.0.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.12.0"
pytest = "^8.1.1"
ipykernel = "^6.29.4"
pyright = "^1.1.359"
pytest-profiling = "^1.7.0"
memray = "^1.12.0"
syrupy = "^4.6.1"
pytest-cov = "^5.0.0"
pytest-memray = "^1.7.0"
pre-commit = "^4.0.0"

[tool.poetry.scripts]
neuronpedia-runner = "sae_dashboard.neuronpedia.neuronpedia_runner:main"

[tool.ruff.lint]
exclude = ["*.ipynb"]
ignore = ["E203", "E501", "E731", "F722", "E741", "F821", "F403", "ARG002"]
select = ["UP", "TID", "I", "F", "E", "ARG", "SIM", "RET"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Union".msg = "Use `|` instead"
"typing.Optional".msg = "Use `| None` instead"
"typing.Dict".msg = "Use `dict` instead"
"typing.Tuple".msg = "Use `tuple` instead"
"typing.List".msg = "Use `list` instead"

[tool.pyright]
typeCheckingMode = "strict"
reportMissingTypeStubs = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownVariableType = "none"
reportUntypedFunctionDecorator = "none"
reportUnnecessaryIsInstance = "none"
reportUnnecessaryComparison = "none"
reportConstantRedefinition = "none"
reportUnknownLambdaType = "none"
reportPrivateUsage = "none"
reportPrivateImportUsage = "none"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.semantic_release]
version_variables = ["sae_dashboard/__init__.py:__version__"]
version_toml = ["pyproject.toml:tool.poetry.version"]
build_command = "pip install poetry && poetry build"
branches = { main = { match = "main" } }
